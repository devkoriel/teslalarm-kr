from datetime import datetime

CATEGORY_FIELD_INFO = {
    "model_price_up": {
        "display": "Ï∞®Îüâ Í∞ÄÍ≤© ÏÉÅÏäπ",
        "emoji": "üî∫",
        "fields": {
            "title": "Ï†úÎ™©",
            "price": "Í∞ÄÍ≤©",
            "change": "Î≥ÄÌôîÎüâ",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "model_price_down": {
        "display": "Ï∞®Îüâ Í∞ÄÍ≤© ÌïòÎùΩ",
        "emoji": "üîª",
        "fields": {
            "title": "Ï†úÎ™©",
            "price": "Í∞ÄÍ≤©",
            "change": "Î≥ÄÌôîÎüâ",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "purchase_guide": {
        "display": "Íµ¨Îß§ Í∞ÄÏù¥Îìú",
        "emoji": "üõí",
        "fields": {
            "title": "Ï†úÎ™©",
            "model_info": "Î™®Îç∏ Ï†ïÎ≥¥",
            "purchase_tips": "Íµ¨Îß§ ÌåÅ",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "test_drive": {
        "display": "ÏãúÏäπ ÌõÑÍ∏∞",
        "emoji": "üöó",
        "fields": {
            "title": "Ï†úÎ™©",
            "model": "Î™®Îç∏",
            "review_highlights": "ÌïµÏã¨ ÎÇ¥Ïö©",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "charging_info": {
        "display": "Ï∂©Ï†Ñ Ï†ïÎ≥¥",
        "emoji": "‚ö°",
        "fields": {
            "title": "Ï†úÎ™©",
            "location": "Ï∂©Ï†ÑÏÜå ÏúÑÏπò",
            "charging_details": "Ï∂©Ï†Ñ ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "supercharger_update": {
        "display": "ÏäàÌçºÏ∞®Ï†Ä ÏóÖÎç∞Ïù¥Ìä∏",
        "emoji": "üîå",
        "fields": {
            "title": "Ï†úÎ™©",
            "location": "ÏúÑÏπò",
            "charger_details": "ÏäàÌçºÏ∞®Ï†Ä ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "software_update": {
        "display": "ÏÜåÌîÑÌä∏Ïõ®Ïñ¥ Î∞è Í∏∞Îä• ÏóÖÎç∞Ïù¥Ìä∏",
        "emoji": "üíª",
        "fields": {
            "title": "Ï†úÎ™©",
            "update_title": "ÏóÖÎç∞Ïù¥Ìä∏ Ï†úÎ™©",
            "update_details": "ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "driving_tip": {
        "display": "Ï£ºÌñâ ÌåÅ",
        "emoji": "üöò",
        "fields": {
            "title": "Ï†úÎ™©",
            "tip_details": "Ï£ºÌñâ ÌåÅ ÎÇ¥Ïö©",
            "applicable_models": "Ï†ÅÏö© Í∞ÄÎä• Î™®Îç∏",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "maintenance_tip": {
        "display": "Ïú†ÏßÄÎ≥¥Ïàò ÌåÅ",
        "emoji": "üîß",
        "fields": {
            "title": "Ï†úÎ™©",
            "maintenance_details": "Ïú†ÏßÄÎ≥¥Ïàò ÎÇ¥Ïö©",
            "applicable_models": "Ï†ÅÏö© Í∞ÄÎä• Î™®Îç∏",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "subsidy_info": {
        "display": "Î≥¥Ï°∞Í∏à Ï†ïÎ≥¥",
        "emoji": "üí∞",
        "fields": {
            "title": "Ï†úÎ™©",
            "year": "Ïó∞ÎèÑ",
            "model": "Î™®Îç∏Î™Ö",
            "area": "ÏßÄÏó≠",
            "city": "Ïãú/Íµ∞/Íµ¨",
            "expected_price": "ÏòàÏÉÅ Íµ¨Îß§Í∞Ä",
            "subsidy_details": "Î≥¥Ï°∞Í∏à ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Í≤åÏãúÏùº",
        },
    },
    "model3_info": {
        "display": "Î™®Îç∏3 Ï†ïÎ≥¥",
        "emoji": "3Ô∏è‚É£",
        "fields": {
            "title": "Ï†úÎ™©",
            "specific_info": "Î™®Îç∏3 Í¥ÄÎ†® Ï†ïÎ≥¥",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "modelY_info": {
        "display": "Î™®Îç∏Y Ï†ïÎ≥¥",
        "emoji": "üÖ®",
        "fields": {
            "title": "Ï†úÎ™©",
            "specific_info": "Î™®Îç∏Y Í¥ÄÎ†® Ï†ïÎ≥¥",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "modelS_info": {
        "display": "Î™®Îç∏S Ï†ïÎ≥¥",
        "emoji": "üÖ¢",
        "fields": {
            "title": "Ï†úÎ™©",
            "specific_info": "Î™®Îç∏S Í¥ÄÎ†® Ï†ïÎ≥¥",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "modelX_info": {
        "display": "Î™®Îç∏X Ï†ïÎ≥¥",
        "emoji": "üÖß",
        "fields": {
            "title": "Ï†úÎ™©",
            "specific_info": "Î™®Îç∏X Í¥ÄÎ†® Ï†ïÎ≥¥",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "cybertruck_info": {
        "display": "ÏÇ¨Ïù¥Î≤ÑÌä∏Îü≠ Ï†ïÎ≥¥",
        "emoji": "üõª",
        "fields": {
            "title": "Ï†úÎ™©",
            "specific_info": "ÏÇ¨Ïù¥Î≤ÑÌä∏Îü≠ Í¥ÄÎ†® Ï†ïÎ≥¥",
            "details": "ÏÑ∏Î∂ÄÏÇ¨Ìï≠",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "feature_how_to": {
        "display": "Í∏∞Îä• ÏÇ¨Ïö©Î≤ï",
        "emoji": "üì±",
        "fields": {
            "title": "Ï†úÎ™©",
            "feature_name": "Í∏∞Îä•Î™Ö",
            "how_to_details": "ÏÇ¨Ïö© Î∞©Î≤ï",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "service_center": {
        "display": "ÏÑúÎπÑÏä§ÏÑºÌÑ∞ Ï†ïÎ≥¥",
        "emoji": "üè¢",
        "fields": {
            "title": "Ï†úÎ™©",
            "location": "ÏúÑÏπò",
            "service_details": "ÏÑúÎπÑÏä§ Ï†ïÎ≥¥",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "accessory_info": {
        "display": "Ïï°ÏÑ∏ÏÑúÎ¶¨ Î∞è Î∂ÄÌíà Ï†ïÎ≥¥",
        "emoji": "üîå",
        "fields": {
            "title": "Ï†úÎ™©",
            "accessory_details": "Ïï°ÏÑ∏ÏÑúÎ¶¨ Ï†ïÎ≥¥",
            "applicable_models": "Ìò∏Ìôò Î™®Îç∏",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "owner_experience": {
        "display": "Ïò§ÎÑà Í≤ΩÌóòÎã¥",
        "emoji": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
        "fields": {
            "title": "Ï†úÎ™©",
            "experience_details": "Í≤ΩÌóò ÎÇ¥Ïö©",
            "model": "Ï∞®Îüâ Î™®Îç∏",
            "published": "Îâ¥Ïä§ Í≤åÏãúÏùº",
            "trust": "Ïã†Î¢∞ÎèÑ",
            "trust_reason": "Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä",
        },
    },
    "useful_info": {
        "display": "Ïú†Ïö©Ìïú ÌÖåÏä¨Îùº Ï†ïÎ≥¥",
        "emoji": "üëç",
        "fields": {
            "title": "Ï†úÎ™©",
            "useful_info_details": "ÎÇ¥Ïö©",
            "published": "Í≤åÏãúÏùº",
        },
    },
}


def format_detailed_message(news_categories: dict, news_type: str, language="ko", url_mapping: dict = None) -> list:
    """
    Format news articles into detailed Telegram messages.

    Takes categorized news data and formats individual detailed messages for each news item,
    preserving the original language formatting based on the language parameter.

    Args:
        news_categories: Dictionary with category keys and lists of news items
        news_type: Type of news ("news" or "info")
        language: Language code for formatting (default: "ko" for Korean)
        url_mapping: Optional mapping of titles to URLs for citation links

    Returns:
        List of formatted message strings ready to send via Telegram
    """
    messages = []
    for cat_key, news_list in news_categories.items():
        if cat_key not in CATEGORY_FIELD_INFO:
            continue
        info = CATEGORY_FIELD_INFO[cat_key]
        for item in news_list:
            published = item.get("published", "").strip()
            if not published:
                published = (
                    datetime.now().strftime("%YÎÖÑ %mÏõî %dÏùº %H:%M")
                    if language == "ko"
                    else datetime.now().strftime("%B %d, %Y %H:%M")
                )
            trust = item.get("trust", "")
            if isinstance(trust, (int, float)):
                trust = f"{int(trust*100)}%"
            else:
                trust = str(trust).strip()
            trust_reason = item.get("trust_reason", "").strip()
            title = item.get("title", "").strip()

            # Process citation links
            citations = []
            if "urls" in item and isinstance(item["urls"], list) and item["urls"]:
                citations = [{"url": url, "title": "Ïù∏Ïö© Í∏∞ÏÇ¨"} for url in item["urls"]]
            elif url_mapping:
                for key, value in url_mapping.items():
                    if key.lower() == title.lower():
                        citations = value
                        break
                if not citations:
                    for key, value in url_mapping.items():
                        if key.lower() in title.lower() or title.lower() in key.lower():
                            citations = value
                            break
                if citations:
                    if isinstance(citations, str):
                        citations = [{"url": citations, "title": title}]
                    elif isinstance(citations, list):
                        new_citations = []
                        for cit in citations:
                            if isinstance(cit, str):
                                new_citations.append({"url": cit, "title": "Ïù∏Ïö© Í∏∞ÏÇ¨"})
                            elif isinstance(cit, dict):
                                new_citations.append(
                                    {"url": cit.get("url", "#"), "title": cit.get("title", "Ïù∏Ïö© Í∏∞ÏÇ¨")}
                                )
                        citations = new_citations
            if not citations:
                citations = [{"url": item.get("url", "#"), "title": "Ïù∏Ïö© Í∏∞ÏÇ¨"}]

            # Get primary citation link for the header
            if isinstance(citations, list) and len(citations) > 0:
                first_cit = citations[0]
                if isinstance(first_cit, dict) and "url" in first_cit:
                    citation_header_link = first_cit["url"]
                elif isinstance(first_cit, str):
                    citation_header_link = first_cit
                else:
                    citation_header_link = item.get("url", "#")
            else:
                citation_header_link = item.get("url", "#")

            # Process additional citation links
            additional_citations = []
            if isinstance(citations, list) and len(citations) > 1:
                for cit in citations[1:3]:
                    if isinstance(cit, dict):
                        link_cit = cit.get("url", "#")
                        title_cit = cit.get("title", "Ïù∏Ïö© Í∏∞ÏÇ¨")
                    elif isinstance(cit, str):
                        link_cit = cit
                        title_cit = "Ïù∏Ïö© Í∏∞ÏÇ¨"
                    else:
                        continue
                    additional_citations.append(f"<a href='{link_cit}'>{title_cit}</a>")

            # Format message components
            source_type_text = "Í≥µÏãù Îâ¥Ïä§" if news_type == "news" else "Ïª§ÎÆ§ÎãàÌã∞ Ï†ïÎ≥¥"
            header = f"{info['emoji']} <a href='{citation_header_link}'><b>[{source_type_text}] {info['display']} - {title}</b></a>"
            detail_lines = []
            for field_key, label in info["fields"].items():
                if field_key in ["trust", "trust_reason", "published"]:
                    continue
                value = item.get(field_key, "").strip()
                if value:
                    detail_lines.append(f"\n<b>{label}:</b> {value}")
            details = "\n" + "\n".join(detail_lines) if detail_lines else ""
            published_line = f"<b>Í≤åÏãúÏùº:</b> {published}"
            trust_line = f"<b>Ïã†Î¢∞ÎèÑ:</b> {trust}\n<b>Ïã†Î¢∞ÎèÑ ÌåêÎã® Í∏∞Ï§Ä:</b> {trust_reason}"
            citation_lines = ""
            if additional_citations:
                citation_lines = "<b>Ïù∏Ïö© ÎßÅÌÅ¨:</b> " + " | ".join(additional_citations)

            # Combine message components
            full_message = (
                header
                + details
                + "\n\n"
                + published_line
                + "\n\n"
                + trust_line
                + "\n\n"
                + (citation_lines if citation_lines else "")
            )
            messages.append(full_message)
    return messages
